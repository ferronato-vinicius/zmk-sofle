#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&soft_off { hold-time-ms = <2000>; };

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    behaviors {
    };

    combos {
        compatible = "zmk,combos";

        softoff {
            bindings = <&to 4>;
            key-positions = <56 52>;
        };
    };

    macros {
        SQL_SELECT_FROM: SQL_SELECT_FROM {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(S) &kp LS(E) &kp LS(L) &kp LS(E) &kp LS(C) &kp LS(T) &kp SPACE &kp STAR &kp SPACE &kp RET &kp LS(F) &kp LS(R) &kp LS(O) &kp LS(M) &kp SPACE &kp T &kp A &kp B &kp L &kp E &kp RET &kp LS(W) &kp LS(H) &kp LS(E) &kp LS(R) &kp LS(E) &kp SPACE>;
            label = "SQL_SELECT_FROM";
            wait-ms = <35>;
            tap-ms = <35>;
        };

        rgb_pulse: rgb_pulse {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&rgb_ug RGB_ON>,
                <&macro_wait_time 250>,
                <&rgb_ug RGB_OFF>;

            label = "RGB_PULSE";
        };

        SQL_CREATE: SQL_CREATE {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(C) &kp LS(R) &kp LS(E) &kp LS(A) &kp LS(T) &kp LS(E) &kp SPACE &kp LS(T) &kp LS(A) &kp LS(B) &kp LS(L) &kp LS(E) &kp SPACE &kp M &kp Y &kp UNDER &kp D &kp A &kp T &kp A &kp B &kp A &kp S &kp E &kp DOT &kp M &kp Y &kp UNDER &kp T &kp A &kp B &kp L &kp E &kp SPACE &kp LPAR &kp RET &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp I &kp D &kp SPACE &kp LS(I) &kp LS(N) &kp LS(T) &kp COMMA &kp RET &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp N &kp A &kp M &kp E &kp SPACE &kp LS(S) &kp LS(T) &kp LS(R) &kp LS(I) &kp LS(N) &kp LS(G) &kp COMMA &kp RET &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp C &kp R &kp E &kp A &kp T &kp E &kp D &kp UNDER &kp A &kp T &kp SPACE &kp LS(T) &kp LS(I) &kp LS(M) &kp LS(E) &kp LS(S) &kp LS(T) &kp LS(A) &kp LS(M) &kp LS(P) &kp RET &kp RPAR &kp RET &kp LS(U) &kp LS(S) &kp LS(I) &kp LS(N) &kp LS(G) &kp SPACE &kp LS(D) &kp LS(E) &kp LS(L) &kp LS(T) &kp LS(A) &kp RET &kp LS(C) &kp LS(O) &kp LS(M) &kp LS(M) &kp LS(E) &kp LS(N) &kp LS(T) &kp SPACE &kp SQT &kp LS(M) &kp A &kp N &kp A &kp G &kp E &kp D &kp SPACE &kp LS(D) &kp E &kp L &kp T &kp A &kp SPACE &kp T &kp A &kp B &kp L &kp E &kp SPACE &kp S &kp T &kp O &kp R &kp E &kp D &kp SPACE &kp I &kp N &kp SPACE &kp LS(D) &kp A &kp T &kp A &kp B &kp R &kp I &kp C &kp K &kp S &kp MINUS &kp M &kp A &kp N &kp A &kp G &kp E &kp D &kp SPACE &kp S &kp T &kp O &kp R &kp A &kp G &kp E &kp SQT &kp RET>;
            label = "SQL_CREATE";
            wait-ms = <50>;
            tap-ms = <50>;
        };

        SQL_INSERT: SQL_INSERT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(I) &kp LS(N) &kp LS(S) &kp LS(E) &kp LS(R) &kp LS(T) &kp SPACE &kp LS(I) &kp LS(N) &kp LS(T) &kp LS(O) &kp SPACE &kp T &kp A &kp B &kp L &kp E &kp UNDER &kp N &kp A &kp M &kp E &kp SPACE &kp LPAR &kp C &kp O &kp L &kp U &kp M &kp N &kp N1 &kp COMMA &kp SPACE &kp C &kp O &kp L &kp U &kp M &kp N &kp N2 &kp RPAR &kp SPACE &kp RET &kp LS(V) &kp LS(A) &kp LS(L) &kp LS(U) &kp LS(E) &kp LS(S) &kp SPACE &kp LPAR &kp SQT &kp V &kp A &kp L &kp U &kp E &kp N1 &kp SQT &kp COMMA &kp SPACE &kp SQT &kp V &kp A &kp L &kp U &kp E &kp N2 &kp SQT &kp RPAR>;
            label = "SQL_INSERT";
            wait-ms = <35>;
            tap-ms = <35>;
        };

        SQL_OVER: SQL_OVER {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(O) &kp LS(V) &kp LS(E) &kp LS(R) &kp SPACE &kp LPAR &kp LS(P) &kp LS(A) &kp LS(R) &kp LS(T) &kp LS(I) &kp LS(T) &kp LS(I) &kp LS(O) &kp LS(N) &kp SPACE &kp LS(B) &kp LS(Y) &kp SPACE &kp C &kp N1 &kp SPACE &kp LS(O) &kp LS(R) &kp LS(D) &kp LS(E) &kp LS(R) &kp SPACE &kp LS(B) &kp LS(Y) &kp SPACE &kp C &kp N2 &kp SPACE &kp LS(R) &kp LS(O) &kp LS(W) &kp LS(S) &kp SPACE &kp LS(B) &kp LS(E) &kp LS(T) &kp LS(W) &kp LS(E) &kp LS(E) &kp LS(N) &kp SPACE &kp LS(U) &kp LS(N) &kp LS(B) &kp LS(O) &kp LS(U) &kp LS(N) &kp LS(D) &kp LS(E) &kp LS(D) &kp SPACE &kp LS(P) &kp LS(R) &kp LS(E) &kp LS(C) &kp LS(E) &kp LS(D) &kp LS(I) &kp LS(N) &kp LS(G) &kp SPACE &kp LS(A) &kp LS(N) &kp LS(D) &kp SPACE &kp LS(C) &kp LS(U) &kp LS(R) &kp LS(R) &kp LS(E) &kp LS(N) &kp LS(T) &kp SPACE &kp LS(R) &kp LS(O) &kp LS(W) &kp RPAR &kp SPACE &kp LS(A) &kp LS(S) &kp SPACE>;
            label = "SQL_OVER";
            wait-ms = <35>;
            tap-ms = <35>;
        };
    };

    on-startup { bindings = <&RGB_PULSE>; };
    on-wake    { bindings = <&RGB_PULSE>; };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp ESC         &kp N1     &kp N2        &kp N3        &kp N4  &kp N5           &kp UP_ARROW     &kp N6     &kp N7           &kp N8     &kp N9   &kp N0     &kp BACKSPACE
&kp TAB         &kp Q      &kp W         &kp E         &kp R   &kp T            &kp DOWN_ARROW   &kp Y      &kp U            &kp I      &kp O    &kp P      &kp BSLH
&kp LEFT_SHIFT  &kp A      &kp S         &kp D         &kp F   &kp G            &kp LEFT_ARROW   &kp H      &kp J            &kp K      &kp L    &kp SEMI   &kp APOS
&kp LEFT_GUI    &kp Z      &kp X         &kp C         &kp V   &kp B            &kp RIGHT_ARROW  &kp N      &kp M            &kp COMMA  &kp DOT  &kp FSLH   &kp ENTER
&kp C_MUTE      &kp LCTRL  &kp LEFT_GUI  &kp LEFT_ALT  &mo 1   &kp BACKSPACE    &kp ENTER        &kp SPACE  &kp RIGHT_SHIFT  &kp ENTER  &mo 2    &kp SLASH
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        KEYPAD {
            bindings = <
&kp GRAVE  &kp F1           &kp F2          &kp F3                &kp F4                 &kp F5                  &kp PG_UP      &kp F6         &kp F7        &kp F8        &kp F9        &kp F10        &kp F11
&trans     &kp GRAVE        &mkp LCLK       &kp LS(N9)            &kp LS(N0)             &kp SINGLE_QUOTE        &kp PAGE_DOWN  &kp LS(SLASH)  &kp N7        &kp N8        &kp N9        &kp BACKSPACE  &kp EQUAL
&trans     &kp TILDE        &trans          &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp LS(SINGLE_QUOTE)    &kp HOME       &kp MINUS      &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp PLUS       &kp RIGHT_BRACKET
&trans     &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &kp LS(LEFT_BRACKET)  &kp LS(RIGHT_BRACKET)  &rgb_ug RGB_SPI         &kp END        &kp LS(EQUAL)  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp F12        &trans
&to 4      &trans           &trans          &trans                &trans                 &trans                  &mkp LCLK      &kp EQUAL      &kp LS(A)     &kp N0        &trans        &trans
            >;

            display-name = "layer1";
            sensor-bindings = <&scroll_encoder>;
        };

        SQL {
            bindings = <
&kp TILDE  &trans      &trans            &trans       &trans  &trans    &mmv MOVE_UP     &trans  &trans  &trans       &kp F9     &kp F10      &trans
&trans     &trans      &trans            &trans       &trans  &trans    &mmv MOVE_DOWN   &trans  &trans  &SQL_INSERT  &SQL_OVER  &kp UNDER    &kp PLUS
&trans     &trans      &SQL_SELECT_FROM  &trans       &trans  &trans    &mmv MOVE_LEFT   &trans  &trans  &trans       &trans     &kp LBRC     &kp RBRC
&trans     &sys_reset  &trans            &SQL_CREATE  &trans  &trans    &mmv MOVE_RIGHT  &trans  &trans  &sys_reset   &soft_off  &bootloader  &trans
&trans     &trans      &trans            &trans       &trans  &trans    &mkp LCLK        &trans  &trans  &trans       &trans     &trans
            >;

            display-name = "layer2";
            sensor-bindings = <&scroll_encoder>;
        };

        PYSPARK {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;

            display-name = "layer3";
            sensor-bindings = <&scroll_encoder>;
        };

        SETTINGS {
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2    &bt BT_SEL 3  &bt BT_SEL 4    &bl BL_INC  &trans     &trans  &trans  &trans  &trans  &bt BT_CLR_ALL
&trans  &trans        &trans        &trans          &trans        &trans          &bl BL_DEC  &trans     &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans          &trans        &trans          &trans      &trans     &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &bl BL_SET 100  &bl BL_ON     &bl BL_TOG      &trans      &trans     &trans  &trans  &trans  &trans  &trans
&to 0   &trans        &trans        &trans          &trans        &trans          &trans      &kp SPACE  &trans  &trans  &trans  &trans
            >;

            display-name = "layer4";
            sensor-bindings = <&scroll_encoder>;
        };
    };
};
